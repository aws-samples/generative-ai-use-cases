setting:
  title: Settings
  update:
    message: >-
      Updates are available on GitHub. If you want to use the latest features,
      please pull the main branch of <0>generative-ai-use-cases-jp</0> and
      redeploy.
  general: General
  items:
    version: Version
    version_help: Referencing the version in package.json of generative-ai-use-cases-jp
    rag_enabled: RAG (Amazon Kendra) Enabled
    rag_kb_enabled: RAG (Knowledge Base) Enabled
    agent_enabled: Agent Enabled
    language: Language
    language_help: Change display language
  ai: Generative AI
  ai_items:
    llm_model: LLM Model Name
    image_gen_model: Image Generation Model Name
    video_gen_model: Video Generation Model Name
    agent_name: Agent Name
    model_region: LLM & Image Generation Model Region
  config_message: >-
    Settings can be changed using <0>AWS CDK</0>, not on this screen. If you
    encounter errors when running use cases, please make sure you have enabled
    the specified models in {{region}}. For details on how to do this, please
    refer to <1>generative-ai-use-cases-jp</1>.
  recent_updates: Recent Updates
  view_all_updates: View All Updates
  signout: Sign Out
common:
  not_available: Not available
  loading: Loading...
  clear: Clear
  execute: Execute
  notAuthenticated: You are not authenticated.
  try: Try
  load_more: Load more
  trace: Trace
  feedback_received: Feedback received. Thank you.
  cancel: Cancel
  delete: Delete
  save: Save
  here: here
  optional: Optional
  submit: Submit
  no_options_found: No options found
  not_selected: Not selected
  required: Required
  enter_text: Enter text
  start_over: Start over
  create: Create
  title: Title
  next: Next
  previous: Previous
  none: None
  complete: Complete
  close: Close
  selectUseCase: Select Use Case
  errorNoSuggestions: No suggestions were found.
  reviewComplete: Review completed
  error: An error occurred
writer:
  title: Writing
  saved: Saved
  saving: Saving...
  characters: characters
  clear: Clear
  tutorial: Tutorial
  review: Review
  clear_success: Editor cleared
  tutorial_success: Tutorial loaded
  no_issues: No issues found
  replace: Replace
  clear_comments: Clear Comments
  appearance: Appearance
  system: System
  light: Light
  dark: Dark
  link: Link
  paste_link: Paste a link
  color: Color
  background: Background
  colors:
    default: Default
    purple: Purple
    red: Red
    yellow: Yellow
    blue: Blue
    green: Green
    orange: Orange
    pink: Pink
    gray: Gray
  ai:
    trace: Trace
    thinking: Thinking
    instruct_ai: Instruct AI
    continue_instruct: Continue instructing AI
    search_instruct: Instruct AI to search
    replace_selection: Replace selection
    insert_below: Insert below selection
    discard: Discard
    error: An error occurred
    ask_ai: Ask AI
    edit_selection: Edit Selection
    use_search_engine: Use Search Engine
    generate: Generate
    options:
      improve: Improve
      fix: Fix
      shorter: Make shorter
      longer: Make longer
      search: Search and write...
      collect_data: Research and add supporting data
      fact_check: Fact check
      continue: Continue output
  description: >-
    A tool for writing assistance, text refinement, and proofreading. You can
    write efficiently with AI assistance.
  useAsTextEditor: Use as a Text Editor
  textEditorDescription: >-
    This editor can be used as a normal text editor. It supports basic
    formatting such as bold, italic, lists, and headings. It also displays the
    character count during writing.
  autoCompleteFeature: AI Auto-Complete Feature
  autoCompleteDescription: >-
    You can give instructions to the AI for selected text. For example,
    operations such as 'improve', 'proofread', 'make shorter', 'make longer', or
    you can enter custom instructions.
  example1: 'For example, you can have the AI continue this paragraph:'
  amazonBedrockDescription: >-
    Amazon Bedrock is a fully managed service that offers a choice of
    high-performing foundation models (FMs) from leading AI companies like AI21
    Labs, Anthropic, Cohere, Meta, Stability AI, and Amazon via a single API,
    along with a broad set of capabilities you need to build generative AI
    applications with security, privacy, and responsible AI.
  example2: >-
    You can also check facts in your text. Select the following text and choose
    'Fact check':
  factCheckExample: >-
    Barack Obama was the 43rd President of the United States. He served as
    president from 2001 to 2009.
  reviewFeature: Review Feature
  reviewDescription: >-
    You can review your entire document. This will detect typos and grammatical
    errors and suggest corrections.
  incorrectTextExample: I has gone to Japan. Tokyo is a very beautifull city.
  no_results: No results
chat:
  title: Chat
  drop_files: Drop files here
  sharing: Sharing
  share: Share
  show_system_prompt: Show system prompt
  system_prompt: System Prompt
  initialize: Initialize
  save: Save
  share_conversation: Share Conversation History
  delete_link_message: You can stop sharing the conversation history by deleting the link.
  create_link_message: >-
    By creating a link, you will share the conversation history with all users
    who can log in to this application.
  open_link: Open Link
  delete_link: Delete Link
  create_link: Create Link
  advanced_options: Advanced Options
  model_parameters: Model Parameters
  settings: Settings
  delete_confirmation: Delete Confirmation
  delete_chat_confirmation: 'Are you sure you want to delete the chat "{title}"?'
  history: Conversation History
  search_by_title: Search by title
  create_system_prompt: Create System Prompt
  saved_system_prompts: Saved System Prompts
  prompt_examples: Prompt Examples
agent:
  title: Agent Chat
  drop_files: Drop files to upload
flow:
  title: Flow Chat
notfound:
  title: Not Found
shared:
  error: Error
  not_found_message: >-
    Page not found. The conversation history may not be shared or has been
    deleted.
  contact_admin: Please contact the administrator.
rag:
  title: RAG Chat
  filter: Filter
  filter_settings: 'For filter settings, please refer to'
  here: here
  please_refer: .
  no_settings_found: 'No settings found. You can add filters by customizing '
  can_add_filters: .
  retrieving: Retrieving reference documents from Kendra...
  errorRetrieval: >-
    Failed to retrieve reference documents from Kendra. Please consider the
    following actions:

    - Check if the scheduled time for Amazon Kendra index creation has passed
    and enough time has elapsed for indexing

    - Verify that the scheduled time for Amazon Kendra index deletion has not
    passed
  noDocuments: >-
    No reference documents found. Please consider the following actions:

    - Check if the target document has been added to the Amazon Kendra data
    source

    - Verify that the Amazon Kendra data source has been synced

    - Try changing the expression of your input
  page: page
  knowledgeBase:
    retrieving: Retrieving reference documents from Knowledge Base...
    retrieveError: >-
      An error occurred during retrieval. Please consider the following actions:

      - Verify that the embeddingModelId specified in cdk.json is enabled in
      Amazon Bedrock ({{region}})
    noDocuments: >-
      No reference documents found. Please consider the following actions:

      - Check if the target document has been added to the Knowledge Base data
      source

      - Verify that the Knowledge Base data source has been synchronized

      - Try changing the expression of your input
summarize:
  title: Summarize
  text_to_summarize: Text to summarize
  enter_text: Enter text
  additional_context: Additional context
  additional_context_placeholder: 'You can enter additional points to consider (e.g., casualness, etc.)'
  result_placeholder: Summarized text will be displayed here
transcribe:
  title: Speech Recognition
  select_input_method: Please select from microphone input or file upload
  mic_input: Microphone Input
  stop_recording: Stop Recording
  start_recording: Start Recording
  file_upload: File Upload
  supported_files: 'mp3, mp4, wav, flac, ogg, amr, webm, m4a files are available'
  detailed_parameters: Detailed parameters
  speaker_recognition: Speaker recognition
  max_speakers: Max Speakers
  max_speakers_help: Maximum number of speakers to recognize
  speaker_names: Speaker names (comma separated)
  result_placeholder: Speech recognition results will be displayed here
translate:
  title: Translate
  text_to_translate: Text to translate
  auto_translate: Auto translate
  auto_detect_language: Auto detect language
  enter_text: Enter text
  additional_context: Additional context
  additional_context_placeholder: 'You can enter additional points to consider (e.g., casualness, etc.)'
  result_placeholder: Translation results will be displayed here
  continue_output: Continue output
webcontent:
  title: Web Content Extraction
  website_to_extract: Website to extract content from
  instruction: >-
    Please specify a website where text is the main content, such as blogs,
    articles, or documents. Otherwise, it may not output correctly.
  enter_url: Enter URL
  additional_context: Additional context
  additional_context_placeholder: 'You can enter additional points to consider (e.g., summarize)'
  result_placeholder: Extracted text will be displayed here
  error_message: >-
    An error occurred when accessing the specified URL. The site may prohibit
    scraping or the URL may be incorrect. If you think this is a temporary
    issue, please try again.
  original_text: 'Original text ({{status}})'
  loading: loading...
  not_fetched: not fetched
  fetched: fetched
  not_fetched_instruction: Not fetched. Please enter a URL and press the execute button.
diagram:
  title: Generate Diagram
  input_label: Text for diagram generation
  model: Model
  diagram_type: Select diagram type
  other_diagram_types: View other diagram types
  input_placeholder: Enter text for diagram generation
  input_example: Input example
  clear: Clear
  generate: Generate
  result: Result
  step1_loading: 'Step 1: Selecting the optimal diagram'
  step1_complete: 'Step 1: Complete'
  step1_selected: Selected
  step2_loading: 'Step 2: Generating diagram'
  answer: Answer
  diagram_will_appear: Diagram will be displayed here
  download_as_svg: Download as SVG
  download_as_png: Download as PNG
  show_diagram: Show Diagram
  show_code: Show Code
  invalid_syntax: Invalid syntax
  svg_error: 'SVG output error: '
  png_error: 'PNG output error: '
  markdown_edit: Edit Markdown
  mermaid_syntax: Mermaid syntax here
  types:
    AI:
      description: Let AI choose the optimal diagram type
      exampleTitle: Expense Flow Example
      content: Please illustrate a typical company expense production flow with colors.
    flowchart:
      title: Flowchart
      desc: Flowcharts visualize processes or workflows
      exampleTitle: Morning Routine Example
      content: >-
        I want to create a flowchart for a morning routine. Please include these
        steps:

        Wake up, get out of bed, wash face, brush teeth, eat breakfast, get
        dressed, leave house.

        Include a decision point 'Do I have extra time?' where if there is time,
        add a step 'Drink coffee' before leaving. If there's no extra time,
        proceed directly to 'Leave house'.

        Please make it concise and easy to read.
    piechart:
      title: Pie Chart
      desc: Pie charts show proportions of a whole
      exampleTitle: Commute Methods Example
      content: >-
        I want to create a pie chart showing the commuting methods for people in
        their 20s and 30s in Tokyo.

        Please set appropriate percentages for these five methods: train,
        bicycle, walking, car, and bus.

        The title should be 'Commuting Methods for 20-30s in Tokyo'.
    mindmap:
      title: Mind Map
      desc: Mindmaps organize related concepts or ideas hierarchically
      exampleTitle: Generative AI Use Cases Example
      content: >-
        Please create a mind map illustrating various use cases for generative
        AI.
    quadrantchart:
      title: Quadrant Chart
      desc: Quadrant charts categorize items along two axes
      exampleTitle: Social Media Analysis Example
      content: |-
        Create a quadrant chart comparing social media platforms.
        The title should be 'Social Media Platform Analysis'.
        The X-axis ranges from 'Text-focused' to 'Visual-focused',
        and the Y-axis ranges from 'Professional' to 'Casual'.

        Label the quadrants as follows:
        Top-right: 'Visual Casual'
        Top-left: 'Textual Casual'
        Bottom-left: 'Textual Professional'
        Bottom-right: 'Visual Professional'

        Plot these social media platforms:
        Twitter: Somewhat text-focused and moderately casual,
        Instagram: Very visual and quite casual,
        LinkedIn: Text-focused and very professional,
        TikTok: Very visual and the most casual,
        Facebook: Around the middle of both axes.

        If possible, use different colors for each platform.
    sequencediagram:
      title: Sequence Diagram
      desc: Sequence diagrams show interactions between components over time
      exampleTitle: Login Flow Example
      content: >-
        Create a sequence diagram for a web application showing the flow from
        when a user clicks the login button to when authentication is complete.

        Include these three components: Frontend, Authentication Server, and
        Database.
    timeline:
      title: Timeline
      desc: Timelines display events in chronological order
      exampleTitle: Social Media Evolution Example
      content: >-
        Create a timeline showing the major developments and turning points in
        social media from 2000 to 2020.

        Include these elements:
        Rise of blogging
        Emergence of photo sharing platforms
        Introduction of microblogging
        Development of video sharing services
        Spread of mobile-first social networks
        Rise of short-form video platforms

        For each turning point, add 1-2 important technological innovations or
        social changes (e.g., smartphone adoption, high-speed mobile internet)
        that occurred during that period.
    gitgraph:
      title: Git Graph
      desc: Git graphs visualize branch and merge history
      exampleTitle: Development Flow Example
      content: >-
        Create a git graph showing a development flow where two feature branches
        (login feature and profile editing feature) diverge from the main
        branch.

        The login feature development includes multiple commits like form
        implementation and validation before finally being merged into the main
        branch via a Pull Request.

        Meanwhile, during the profile editing feature development, there's a
        need to incorporate the latest changes made to the main branch.

        At each merge point, include commit messages that resemble real project
        workflow, such as 'Reviewed and merged login feature #123'.
    erdiagram:
      title: ER Diagram
      desc: ER diagrams represent database entities and relationships
      exampleTitle: Blog DB Design Example
      content: |-
        Show a database design for a blog system.

        Include these tables with appropriate relationships between them:
        posts
        users
        comments
        categories
        tags
    classdiagram:
      title: Class Diagram
      desc: Class diagrams represent object-oriented class structures
      exampleTitle: E-commerce Model Example
      content: |-
        Create a domain model for an e-commerce site.

        Include these classes:
        User
        Product
        Order
        CartItem

        Each class should have appropriate properties and methods.
    statediagram:
      title: State Diagram
      desc: State diagrams represent system state changes
      exampleTitle: Cart State Example
      content: >-
        Create a state diagram for an online shopping cart.

        Include states like 'Empty', 'Items Added', 'Checkout in Progress', and
        'Payment Complete'.
    xychart:
      title: XY Chart
      desc: XY charts show relationships between two variables
      exampleTitle: Sleep vs Work Hours Example
      content: >-
        Create an XY chart showing the relationship between average sleep time
        and working hours in Japan over the past 10 years.

        Use the X-axis for average daily working hours and the Y-axis for
        average daily sleep hours, plotting data points for each year.
    blockdiagram:
      title: Block Diagram
      desc: Block diagrams represent system components
      exampleTitle: Smartphone Components Example
      content: |-
        Create a block diagram showing the hardware components of a smartphone.

        Include these elements:
        Processor
        Memory
        Storage
        Display
        Camera
        Various sensors
    architecture:
      title: Architecture Diagram
      desc: Architecture diagrams represent system structure
      exampleTitle: Web App Architecture Example
      content: |-
        Create an architecture diagram for a cloud-based web application.

        Include these components:
        Frontend
        Backend
        Database
        Cache
        Load Balancer
        CDN
    ganttchart:
      title: Gantt Chart
      desc: Gantt charts visualize project schedules
      exampleTitle: Development Schedule Example
      content: >-
        Create a Gantt chart showing the schedule for a web application
        development project.

        Include phases for requirements gathering, design, development, testing,
        and deployment.
    userjourney:
      title: User Journey
      desc: User journeys map customer experience flows
      exampleTitle: Purchase Experience Example
      content: >-
        Create a user journey diagram for a customer experience on an online
        shopping site.

        Include these steps:
        Product search
        Product viewing
        Cart addition
        Checkout
        Payment
        Shipment tracking
    sankeychart:
      title: Sankey Chart
      desc: Sankey charts show flows with proportional width
      exampleTitle: User Flow Example
      content: |-
        Create a Sankey chart showing user flow through a website.
        Start from the landing page and show page transitions and dropout rates.
    requirementdiagram:
      title: Requirement Diagram
      desc: Requirement diagrams represent system requirements and relationships
      exampleTitle: Smart Home Requirements Example
      content: >-
        Show the main functional requirements for a smart home system.

        Include requirements for lighting control, temperature management,
        security, and energy efficiency.
    networkpacket:
      title: Network Packet Diagram
      desc: Network packet diagrams represent data structures
      exampleTitle: HTTP Packet Example
      content: |-
        Create a diagram showing the structure of an HTTP request packet.
        Include the main elements of the header and body.
  chart: Chart
  serverBusy: Server is busy. Please try again later.
generateText:
  title: Text Generation
  source_info: Source information for text
  input_placeholder: Enter text
  format_placeholder: 'Specify the text format (markdown, blog, business email, etc.)'
  continue_output: Continue output
  clear: Clear
  execute: Execute
  result_placeholder: Generated text will be displayed here
optimizePrompt:
  title: Prompt Optimization
  input_placeholder: >-
    Enter your current prompt as is. If the output is in English, add
    instructions like 'Please output in Japanese'.
  result_placeholder: Results will be displayed here
  clear: Clear
  execute: Execute
videoAnalyzer:
  title: Video Analysis
  label: Analyze video in near real-time
  camera: Camera
  start: Start
  stop: Stop
  model: Model
  clear: Clear
  errors:
    cameraAccessFailed: 'Could not access webcam:'
generateImage:
  title: Image Generation
  prompt: Prompt
  negative_prompt: Negative Prompt
  model: Model
  resolution: Resolution
  seed: Seed
  image_samples: Image Samples
  generation_mode: Generation Mode
  mask_prompt: Mask Prompt
  colors: Colors
  control_mode: Control Mode
  style_preset: Style Preset
  cfg_scale: CFG Scale
  steps: Steps
  image_strength: Image Strength
  control_strength: Control Strength
  generate: Generate
  clear: Clear
  detail_parameters: Detailed Parameters
  init_image: Initial Image
  mask_image: Mask Image
  set: Set
  custom_colors: Custom Colors
  add_color: Add Color
  help:
    prompt: >-
      Describe the image you want to generate. Use keywords rather than
      sentences.
    negative_prompt: >-
      Describe elements you don't want in the generated image. Use keywords
      rather than sentences.
    seed: Random seed value. Using the same seed will generate the same image.
    image_samples: >-
      Generates the specified number of images simultaneously while setting
      random seeds.
    generation_mode: >-
      TEXT_IMAGE: Generate images from text. 
      IMAGE_VARIATION: Generate similar images from a reference. 
      INPAINTING: Edit part of an image. 
      OUTPAINTING: Expand an image.
      IMAGE_CONDITIONING: Reflect composition.
      COLOR_GUIDED_GENERATION: Generate with color specification.
      BACKGROUND_REMOVAL: Remove background.
    init_image: >-
      Set an image as the initial state for generation. Setting an initial image
      guides the generation to produce images similar to it.
    mask_image: >-
      Set a mask for the image. Setting a mask image allows you to generate
      either the masked area (Inpaint) or the area outside the mask (Outpaint).
      Cannot be used with mask prompt.
    mask_prompt: >-
      Describe elements you want to mask/exclude (Inpaint) or elements you don't
      want to mask/want to keep (Outpaint). Use keywords rather than sentences.
      Cannot be used with mask image.
    colors: You can select from preset color palettes
    control_mode: >-
      CANNY_EDGE: Extracts edges from the reference image. Optimal for
      reflecting detailed patterns. SEGMENTATION: Divides the reference image
      into regions. Optimal for reflecting the positional relationship of
      multiple objects.
    cfg_scale: Higher values generate images more faithful to the prompt.
    steps: >-
      Number of iterations for image generation. More steps refine the image but
      take longer to generate.
    image_strength: >-
      Values closer to 1 generate images more similar to the initial image,
      while values closer to 0 generate images more different from the initial
      image.
    control_strength: >-
      Values closer to 1 generate images based more on the reference image's
      composition, while values closer to 0 generate images with compositions
      more different from the reference image.
  assistant:
    title: Image Generation Assistant
    help: >-
      Creates prompts for image generation. Tell the assistant what you want,
      and AI will generate prompts and negative prompts to create an image.
    hint_title: Hints
    hint_1: Start with a simple instruction like 'Generate a cute cat image'.
    hint_2: Specifying styles like 'in watercolor style' or 'realistic' is effective.
    hint_3: >-
      Describe in detail the elements you want to include, such as 'mountains in
      the background' or 'blue sky'.
    hint_4: >-
      Instructions related to quality, such as 'high resolution' or 'detailed',
      are also effective.
    hint_5: >-
      You can also specify particular artistic styles like 'anime style' or 'oil
      painting style'.
    hint_6: >-
      For complex scenes, give specific instructions about composition, color
      scheme, etc.
    error_title: An error occurred
    error_message: Failed to generate the prompt. Please try again.
    retry: Retry
    generating_prompt: Generating prompt...
    prompt_completed: Prompt generation completed
    generating_image: Generating image...
    recommended_style: Recommended Styles
    no_style: No Style
    input_placeholder: What kind of image would you like to generate?
landing:
  title: AWS Generative AI Sample Application
  try: Try it
  try_message: This application is a sample application using AWS generative AI services.
  use_cases_title: Use Cases
  use_cases:
    chat:
      title: Chat
      description: >-
        You can have interactive dialogues with an LLM in a chat format. It can quickly respond to detailed use cases and new use cases. It is also effective as an environment for validating prompt engineering.
    rag_chat:
      title: RAG Chat
      sub_kendra: Amazon Kendra
      sub_kb: Knowledge Base
      description_kendra: >-
        RAG (Retrieval Augmented Generation) is a method that combines information retrieval and LLM text generation, enabling effective information access. By generating responses based on reference documents retrieved from Amazon Kendra, it is easy to realize an "LLM chat that corresponds to internal information".
      description_kb: >-
        RAG (Retrieval Augmented Generation) is a method that combines information retrieval and LLM text generation, enabling effective information access. Reference documents are retrieved using Knowledge Base's Hybrid Search, and the LLM generates responses.
    agent_chat:
      title: Agent Chat
      description: >-
        In the Agent Chat use case, you can use Agents for Amazon Bedrock to execute actions or reference the vector database of Knowledge Bases for Amazon Bedrock.
    flow_chat:
      title: Flow Chat
      description: >-
        Use Flow to create an interactive chat flow with multiple steps. Dynamically determine the next step based on user input to realize more complex dialogue scenarios.
    generate_text:
      title: Text Generation
      description: >-
        Generating text in any context is one of the tasks that LLMs excel at. It supports various contexts such as articles, reports, and emails.
    summarize:
      title: Summarization
      description: >-
        LLMs are good at summarizing large amounts of text. You can provide context when summarizing, such as "in one line" or "in words a child can understand".
    writer:
      title: Writing
      description: >-
        LLMs trained in multiple languages can perform translation. Moreover, not only can they translate, but they can also reflect various specified context information such as casualness and target audience in the translation.
    translate:
      title: Translation
      description: >-
        LLMs trained in multiple languages can perform translation. Moreover, not only can they translate, but they can also reflect various specified context information such as casualness and target audience in the translation.
    web_content:
      title: Web Content Extraction
      description: >-
        Extract web content such as blogs and documents. LLMs remove unnecessary information and format it into a coherent text. The extracted content can be used in other use cases such as summarization and translation.
    image:
      title: Image Generation
      description: >-
        Image generation AI can create new images based on text or images. It allows immediate visualization of ideas and can be expected to improve efficiency in design work. In this feature, you can get LLM assistance in creating prompts.
    video-generation:
      title: Video Generation
      description: >-
        Video generation AI can create short videos based on text or images. The generated videos can be used as material in various scenes.
    video-analysis:
      title: Video Analysis
      description: >-
        With multimodal models, it is now possible to input not only text but also images. In this feature, you request the LLM to analyze input video image frames and text.
    diagram:
      title: Diagram Generation
      description: >-
        Automatically create various diagrams such as flowcharts, sequence diagrams, and mind maps from natural language descriptions, documents, or code. Visually represent and efficiently understand complex relationships in system design, business flows, and project planning.
  use_cases_integration:
    title: Use Case Integration
    blog:
      title: Blog Article Creation
      description: >-
        Generate blog articles by combining multiple use cases. By automatically generating the article overview and thumbnail image, OGP settings become easier. As an example, generate a blog article introducing generative AI based on information from the AWS official site.
    meeting:
      title: Meeting Minutes Creation
      description: >-
        Combine multiple use cases to automatically create meeting minutes from audio recording data. It is possible to transcribe, format the transcription, and create minutes without incurring human costs.
  demo:
    chat:
      content: >-
        Please write a Python function that returns Fibonacci numbers. Also,
        explain the implementation.

        The argument should be the term, and the processing should be written
        recursively. Please output in markdown.
    rag:
      content: Please explain Claude's parameters and how to set them.
    agent:
      content: What is generative-ai-use-cases-jp?
    generate:
      information: >-
        Amazon Bedrock is a fully managed service that offers a choice of
        high-performing foundation models (FMs) from leading AI companies like
        AI21 Labs, Anthropic, Cohere, Meta, Stability AI, and Amazon via a
        single API, along with a broad set of capabilities you need to build
        generative AI applications with security, privacy, and responsible AI.
        Using Amazon Bedrock's comprehensive capabilities, you can easily
        experiment with a variety of top FMs, privately customize them with your
        data using techniques such as fine-tuning and Retrieval Augmented
        Generation (RAG), and create managed agents that execute complex
        business tasks from booking travel and processing insurance claims to
        creating ad campaigns and managing inventory—all without writing code.
        Amazon Bedrock is serverless, so there is no infrastructure to manage,
        and you can securely integrate and deploy generative AI capabilities
        into your applications using the AWS services you are already familiar
        with.
      context: >-
        For a presentation, please organize in markdown format with chapters,
        each with a concise explanation.
    summarize:
      sentence: >-
        Amazon Bedrock is a fully managed service that makes foundation models
        (FMs) from Amazon and leading AI startups available through an API,
        allowing you to choose from a variety of FMs to find the model best
        suited for your use case. Amazon Bedrock's serverless experience enables
        you to get started quickly with FMs, easily experiment with FMs,
        privately customize FMs with your own data, and seamlessly integrate and
        deploy FMs into your applications using AWS tools and capabilities.
        Amazon Bedrock Agents is a fully managed capability that makes it easy
        for developers to create generative AI applications that can provide
        up-to-date answers based on their own knowledge sources and complete
        tasks across a wide range of use cases. Bedrock's serverless experience
        enables you to get started quickly, privately customize FMs with your
        own data, and easily integrate and deploy them into your applications
        using familiar AWS tools and capabilities (including integration with
        Amazon SageMaker ML capabilities such as experiments for testing
        different models and pipelines for managing FMs at scale).
    translate:
      sentence: >-
        Hello. I am an AI assistant that helps with translation. Please enter
        any text you'd like.
      language: en
    web_content:
      url: 'https://aws.amazon.com/bedrock/'
    image:
      content: >-
        Please output smartphone advertisement design ideas.

        Cute, stylish, easy to use, POP culture, friendly, youth-oriented,
        music, photography, trendy smartphone, city background
    video:
      content: >-
        Please describe what is shown in the video. If there is any text
        visible, please read that as well.
    diagram:
      content: Please illustrate a typical company expense production flow with colors.
drawer:
  builder_mode: Builder Mode
  use_cases: Use Cases
  generative_ai: Generative AI
  tools: Tools
  ai_services: AI Services
feedback:
  reason_title: Please tell us why you rated this response.
  reason_error: Please select a reason.
  additional_feedback: 'If you have any additional feedback, please enter it here. (optional)'
  reasons:
    inaccurate: Inaccurate
    outdated: Outdated information
    harmful: Harmful or offensive
    other: Other
model:
  parameters:
    reasoning: Reasoning
    reasoning_budget: Reasoning Budget
demo:
  inter_use_cases: Use Case Integration
sketch:
  upload_image: Upload Image
  pen_size: Pen Size
  clear: Clear
navigation:
  home: Home
  settings: Settings
  chat: Chat
  ragChat: RAG Chat
  agentChat: Agent Chat
  flowChat: Flow Chat
  textGeneration: Text Generation
  summary: Summary
  writing: Writing
  translation: Translation
  webContentExtraction: Web Content Extraction
  imageGeneration: Image Generation
  videoGeneration: Video Generation
  videoAnalysis: Video Analysis
  diagramGeneration: Diagram Generation
  speechRecognition: Speech Recognition
  promptOptimization: Prompt Optimization
video:
  model: Model
  prompt:
    title: Prompt
    placeholder: Kids are playing with many balls
    display: Prompt will be displayed here
  dimension: Screen Size
  resolution: Resolution
  aspectRatio: Aspect Ratio
  duration: Duration (seconds)
  fps: FPS
  seed:
    title: Seed
    help: Random seed value. The same video will be generated with the same seed value.
  loop: Loop
  generate: Generate
  clear: Clear
  press:
    play: Press the play button
  generation:
    started: Video generation job has started. You can leave this page during generation.
    failed: Failed to generate video ({{error}})
  load:
    more: Load more
  table:
    play: Play
    status: Status
    prompt: Prompt
    model: Model
    date: Date
    download: Download
    delete: Delete
  status:
    inprogress: In Progress
    completed: Completed
    failed: Failed
  loading: Loading...
  no_preview: No preview available
  preview_loading: Loading preview...
  job:
    list: Job List
    delete_confirm: Are you sure you want to delete this job?
    delete_success: Job deleted successfully
    delete_failed: Failed to delete job
    no_jobs: No generation jobs available
  error:
    model_not_selected: No model selected
    empty_prompt: Please enter a prompt
    invalid_parameters: Invalid parameters
  upload: Upload
  uploadImage: Upload Image
  uploadImageHelp: Specify the image used in the first frame of the video.
  supportedExtensions: 'Supported Extensions: {{acceptedExtensions}}'
  supportedImageDimensions: 'Supported Image Dimensions: {{supportedDimensions}}'
files:
  error:
    mimeMismatch: "{{fileName}} has a file type that doesn't match its extension."
    modelNotSupported: This model does not support files.
    invalidExtension: >-
      {{fileName}} has an unsupported extension. Allowed extensions are
      {{acceptedExtensions}}
    fileSizeExceeded: '{{fileName}} exceeds the maximum file size of {{maxSize}} MB.'
    imageCountExceeded: 'Please limit image files to {{maxCount}} or fewer'
    videoCountExceeded: 'Please limit video files to {{maxCount}} or fewer'
    fileCountExceeded: 'Please limit files to {{maxCount}} or fewer'
    invalidImageDimension: >-
      The allowed image file size is {{allowedDimensions}} (the uploaded image size is {{uploadedDimension}})
auth:
  title: Generative AI Use Cases on AWS
  loading: Loading...
  login: Login
useCaseBuilder:
  untitledUseCase: Untitled Use Case
  inputExamples: Input Examples
  untitled: Untitled
  resultPlaceholder: Results will appear here
  attach_file: Attach File
  error:
    rag_kendra_not_enabled: >-
      {{retrieveKendra}} is specified in the prompt template, but RAG Chat
      (Amazon Kendra) is not enabled in GenU.
    rag_knowledge_base_not_enabled: >-
      {{retrieveKnowledgeBase}} is specified in the prompt template, but RAG
      Chat (Knowledge Base) is not enabled in GenU.
    missing_text_form: >-
      Please include a form {{text{{label}}}} in the prompt template to input
      the search query for Amazon Kendra.
    missing_kb_text_form: >-
      Please include a form {{text{{label}}}} in the prompt template to input
      the search query for Knowledge Base.
    missing_select_options: >-
      No options are set for {{select}}. Please set it like
      {{select:label:option1,option2}}
    empty_select_options: '{{select:{{label}}}} contains empty options.'
    duplicate_select_options: '{{select:{{label}}}} contains duplicate options.'
  blog:
    reference_info: Get Reference Information
    reference_info_description: >-
      Automatically retrieve information as a reference for your article by
      specifying a URL.

      By setting additional context, you can extract only the information you
      need.
    reference_info_context: >-
      Please extract only the parts that explain the overview of generative AI,
      how it works, and the parts that explain AWS.
    generate_article: Generate Article
    generate_article_description: >-
      Automatically generate blog articles based on reference information. By
      setting the context in detail, you can make it easier to generate content
      that matches your intentions.
    generate_article_context: >-
      Please generate a blog post explaining the mechanism of generative AI and
      the benefits of using generative AI on AWS. When generating the article,
      please follow the <rules></rules>.
      <rules>
      - Write in markdown format with chapters.
      - Target the article at beginners of generative AI and AWS.
      - Don't use terms that IT beginners wouldn't understand, or replace them
      with easy-to-understand words.
      - Make it an article that explains what can be done with generative AI.
      - Readers won't be satisfied with a small amount of text, so please
      increase the amount of text by complementing with general information.
      - Make the text engaging for readers.
      </rules>
    summarize_article: Summarize Article
    summarize_article_description: >-
      Summarize the article for OGP (the article preview displayed when sharing
      the article link). By properly setting the OGP, you can correctly convey
      the overview of the article when it is shared.
    generate_thumbnail: Generate Article Thumbnail
    generate_thumbnail_description: >-
      Generate a thumbnail for OGP (the article preview displayed when sharing
      the article link). Setting a catchy thumbnail for OGP might attract
      readers' interest.
    generate_thumbnail_content: >-
      Please generate a thumbnail image for the blog post's OGP. Make it an
      image that clearly shows it's an article about cloud and AI at a glance.
      The blog post summary is set in <article></article>.
      <article>
      {{summarizedSentence}}
      </article>
  meeting:
    transcription: Transcription
    transcription_description: >-
      Use the "Speech Recognition" feature to transcribe the conversation from
      the recording data. Please run it with any audio file.

      After the speech recognition is complete, press the "Format" button (the
      speech recognition result will be copied automatically).
    formatting: Formatting
    formatting_description: >-
      Use the "Text Generation" feature to format the transcription file. It
      corrects filler words and parts that were not correctly recognized by
      speech recognition, making it easier for humans to understand.
    formatting_context: >-
      The transcription result of the recording data is input, so please format
      it according to <rules></rules>.

      <rules>
      - Remove filler words.
      - Rewrite content that appears to be misrecognized by transcription to the
      correct content.
      - If conjunctions, etc. are omitted, please complement them to make it
      easier to read.
      - Do not omit Q&A, please include them.
      </rules>
    create_minutes: Create Minutes
    create_minutes_description: >-
      Use the "Text Generation" feature to generate minutes. By specifying the
      context in detail, you can instruct the format of the minutes and the
      granularity of the description.
    create_minutes_context: >-
      Please create minutes in markdown format based on the meeting's
      statements.

      Please organize by theme discussed in the meeting, summarizing the content
      of the discussion, decisions, and homework items.
  edit: Edit Use Case
  createNew: Create New
  menuAppDefinition: Application Definition
  menuInputExamples: Input Examples
  menuModelSelection: Model Selection
  menuFileAttachment: File Attachment
  menuUpdate: Update
  menuCreate: Create
  menuDelete: Delete
  title: Title
  description: Description
  promptTemplate: Prompt Template
  promptTemplatePlaceholder: |-
    Enter a prompt template.
    To receive user input, use {{text}} or {{text:label}}.
    To present choices, use {{select:label:option1,option2}}.
    To use RAG, use {{retrieveKendra:label}} or {{retrieveKnowledgeBase:label}}.
  promptTemplateHint: >-
    {{text}}, {{text:label}}, {{select:label:option1,option2}}, {{form:label}},
    {{retrieveKendra}}, {{retrieveKnowledgeBase}}
  addInputExample: Add Input Example
  modelFixed: Fix model
  modelNotFixed: Don't fix model
  modelFixedDescription: Users can only use the fixed model in this app.
  modelNotFixedDescription: Users can select which model to use in this app.
  fileUploadEnabled: Enable file upload
  fileUploadDisabled: Disable file upload
  fileUploadDescription: Users can upload files for the LLM to reference the content.
  createDescription: Create a use case with the above content.
  updateDescription: Update the use case with the above content.
  deleteDescription: Completely delete this use case. This action cannot be undone.
  create: Create
  update: Update
  delete: Delete
  createErrorCondition: 'The following conditions must be met:'
  updateErrorCondition: 'The following conditions must be met:'
  preview: Preview
  help:
    example: Example
    promptTemplateTitle: What is a Prompt Template
    promptTemplateDescription: >-
      A prompt template is an instruction to the LLM that includes placeholders
      for embedding user input. Placeholders are converted to input forms in the
      user interface.
    placeholder: Placeholders
    placeholderDescription: >-
      Placeholders are specified in the format like {{text}}. There are several
      types of placeholders.
    placeholderList: Types of Placeholders
    textPlaceholderDescription: >-
      Displays a form for users to enter text. Specified in the format {{text}}
      or {{text:label}}.
    emailReplyExample: Email Reply Creation
    emailReplyPrompt: >-
      Please write a reply to the following email. Use a polite tone and keep it
      concise.

      Original email:
      {{text}}
    formPlaceholderDescription: >-
      Forms are displayed but not included in the prompt to the LLM. Specified
      in the format {{form}} or {{form:label}}.
    formPlaceholderExample:
      title: Inquiry Form
      prompt: >-
        Please create a response to the inquiry based on the following
        information.

        Customer name: {{text:name}}
        Inquiry content: {{text:inquiry}}
        Contact: {{form:contact}}
        Notes: {{form:notes}}
    selectPlaceholderDescription: >-
      Displays a form for users to select from a dropdown. Specified in the
      format {{select:label:option1,option2,...}}.
    selectPlaceholderExample:
      title: Product Review Generation
      prompt: >-
        Please write a review of the following product in a
        {{select:tone:positive,neutral,negative}} tone.

        Product name: {{text:product name}}

        Product features: {{text:features}}
    retrieveKendraDescription: >-
      Includes search results from Amazon Kendra in the prompt. Specified in the
      format {{retrieveKendra}} or {{retrieveKendra:label}}.
    retrieveKendraExample:
      title: Document Search and Response
      prompt: |-
        Please answer the following question based on the search results.

        Question: {{text:question}}

        Search results:
        {{retrieveKendra:question}}
    retrieveKnowledgeBaseDescription: >-
      Includes search results from Knowledge Base in the prompt. Specified in
      the format {{retrieveKnowledgeBase}} or {{retrieveKnowledgeBase:label}}.
    retrieveKnowledgeBaseExample:
      title: Knowledge Base Search and Response
      prompt: >-
        Please answer the following question based on the knowledge base
        information.


        Question: {{text:question}}


        Search results:

        {{retrieveKnowledgeBase:question}}
  deleting: Deleting...
  updating: Updating...
  creating: Creating...
  shared: Shared
  private: Private
  helpTitle: Help
  samples: Sample Collection
  myUseCases: My Use Cases
  accessError: Access Error
  builderMode: Builder Mode
  cancel: Cancel
  deleteConfirmation: Delete Confirmation
  deleteSharedWarning: Delete Shared Warning
  deleteUseCaseTitle: Delete Use Case Title
  favorites: Favorites
  loadMore: Load More
  mainMenu: Main Menu
  noMyUseCases: No My Use Cases
  notExistOrNotShared: Not Exist or Not Shared
  notSharedDescription: The use case is not shared.
  ok: OK
  recentlyUsed: Recently Used
  returnToTop: Return to Top
  share: Share
  shareUrlDescription: Share the use case with the following URL.
  sharedDescription: The use case is shared.
language:
  en: English
  ja: Japanese
  zh: Chinese
  ko: Korean
  fr: French
  es: Spanish
  de: German
